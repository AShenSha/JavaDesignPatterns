适配器模式的优点
    1.将目标类和适配器类解耦，通过引入一个适配器类来重用现有的适配者类，无需修改原有的结构
    2.增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端而言是透明的，而且提高了适配者的复用性,同一个适配者可以在多个不同的系统中复用
    3.灵活性和扩展性都非常好，通过使用配置文件，可以很方面的更改适配器，也可以在不修改原有代买的基础上增加新的适配器
缺点
    1.对于java，C#等不支持多重继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者
    2.适配者类不能为最终类，如在java中能为final类
    3.在java，C#等语言中，适配器模式中的目标抽象类只能为接口，不能为类，使用有一定的局限性
适配器模式的适用场景
    1.系统需要使用一些现有的类，而这些类的接口不符合系统的需要，甚至没有这些类的源代码
    2.想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作