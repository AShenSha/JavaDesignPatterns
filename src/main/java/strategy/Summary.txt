策略模式的优点
    1.对"开闭原则"的完美支持
    2.提供了管理相关的算法族的办法.策略类的等级结构定义了一个算法或行为族,恰当使用继承可以把公共的代码移到抽象策略类中,从而避免代码重复
    3.策略模式提供了一种可以替换继承关系的办法.如果不使用策略模式,那么使用算法的环境类可能就有很多子类,每个子类提供一种算法,这样算法的使用就和算法本身混在一起,不符合"单一职责"
    4.使用策略模式可以避免多重条件选择语句
    5.策略模式提供了一种算法的复用机制
缺点
    1.客户端必须知道所有的策略类,并自行决定使用哪一种
    2.策略模式将导致系统中有很多具体的策略类
    3.无法在客户端使用多个策略类
与状态模式的不同
    1.状态模式与策略模式类似,并且都是能够动态改变对象的行为.但是状态模式是通过状态转移来改变Context所组合的Sate对象
      而策略模式是通过Context本身的决策来改变组合的strategy对象.所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。
    2.状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；
      而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。
适用场景
    1.一个系统需要动态的在几种算法中选择一种
    2.一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重条件选择语句来实现
    3.不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法与相关的数据结构，可以提高算法的保密性与安全性。